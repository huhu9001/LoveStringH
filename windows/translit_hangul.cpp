#include"translit.hpp"

#include"helper_func.hpp"

#define PAT_INITIAL_2 "kk|tt|pp|ss|jj|ch"
#define PAT_INITIAL_1 "[gkndtrlmbpsjchxf]"
#define PAT_INITIAL PAT_INITIAL_2 "|" PAT_INITIAL_1 "|"
#define PAT_MEDIAN "ae?|(?<![yw])(?:eu|ui|o[ei])|eo?|i|o|(?<![w])u"
#define PAT_CODA_2 "k[ksh]|n[jhg]|th|l[kgmbstph]|p[sh]|ss|ch"
#define PAT_CODA_1 PAT_INITIAL_1
#define PAT_CODA PAT_CODA_2 "|" PAT_CODA_1 "|"
#define PAT_JAMO "n[ntsz]|l[xdzq]|lps|m[psz]|ps?[kt]|p[ct]h|s[kntp]|sch|ng[qsz]|fh|hh|[wfvzyq]|"

constexpr static ConstDict<std::string_view, int>::Dict dict_initial({
	{"g", 0},
	{"kk", 1},
	{"n", 2},
	{"d", 3},
	{"tt", 4},
	{"r", 5}, {"l", 5},
	{"m", 6},
	{"b", 7},
	{"pp", 8},
	{"s", 9},
	{"ss", 10},
	{"", 11},
	{"j", 12},
	{"jj", 13},
	{"c", 14}, {"ch", 14},
	{"k", 15}, {"x", 15},
	{"t", 16},
	{"p", 17}, {"f", 17},
	{"h", 18},
});
constexpr static ConstDict<std::string_view, int>::Dict dict_median({
	{"a", 0},
	{"ae", 1},
	{"ya", 2},
	{"yae", 3},
	{"eo", 4},
	{"e", 5},
	{"yeo", 6},
	{"ye", 7},
	{"o", 8},
	{"wa", 9},
	{"wae", 10},
	{"oe", 11}, {"oi", 11},
	{"yo", 12},
	{"u", 13},
	{"wo", 14}, {"weo", 14},
	{"we", 15},
	{"wi", 16},
	{"yu", 17},
	{"eu", 18},
	{"ui", 19}, {"yi", 19},
	{"i", 20},
});
constexpr static ConstDict<std::string_view, int>::Dict dict_coda({
	{"", 0},
	{"k", 1}, {"g", 1},
	{"kk", 2},
	{"ks", 3},
	{"n", 4},
	{"nj", 5},
	{"nh", 6},
	{"d", 7},
	{"l", 8}, {"r", 8},
	{"lk", 9}, {"lg", 9},
	{"lm", 10},
	{"lb", 11},
	{"ls", 12},
	{"lt", 13},
	{"lp", 14},
	{"lh", 15},
	{"m", 16},
	{"p", 17}, {"b", 17},
	{"ps", 18},
	{"s", 19},
	{"ss", 20},
	{"ng", 21},
	{"j", 22},
	{"ch", 23}, {"c", 23},
	{"x", 24}, {"kh", 24},
	{"t", 25}, {"th", 25},
	{"f", 26}, {"ph", 26},
	{"h", 27},
});

template<typename Match> constexpr bool syllable(Match const&m, std::string&out) {
	uint32_t initial;
	if (auto const v = dict_initial[m.template get<1>().to_view()]; v != nullptr)
		initial = *v;
	else return false;

	uint32_t median;
	if (auto const v = dict_median[m.template get<2>().to_view()]; v != nullptr)
		median = *v;
	else return false;

	uint32_t coda;
	if (auto const v = dict_coda[m.template get<3>().to_view()]; v != nullptr)
		coda = *v;
	else return false;

	uint32_t const c = 0xAC00 + initial * 0x24C + median * 0x1C + coda;
	auto const len = out.length();
	out.resize(len + 4);
	out.resize(len + u32u8(c, out.data() + len));
	return true;
}

constexpr static ConstDict<std::string_view, int>::Dict dict_initial_archaic({
	{"K", 0x1100},
	{"G", 0x1101},
	{"N", 0x1102},
	{"T", 0x1103},
	{"D", 0x1104},
	{"L", 0x1105},
	{"M", 0x1106},
	{"P", 0x1107},
	{"B", 0x1108},
	{"S", 0x1109},
	{"SS", 0x110a},
	{"", 0x110b},
	{"J", 0x110c},
	{"DG", 0x110d},
	{"C", 0x110e},
	{"KH", 0x110f},
	{"TH", 0x1110},
	{"PH", 0x1111},
	{"H", 0x1112},
	{"NK", 0x1113},
	{"NN", 0x1114},
	{"NT", 0x1115},
	{"NP", 0x1116},
	{"TK", 0x1117},
	{"LN", 0x1118},
	{"LL", 0x1119},
	{"LH", 0x111a},
	{"R", 0x111b},
	{"MP", 0x111c},
	{"MF", 0x111d},
	{"PK", 0x111e},
	{"PN", 0x111f},
	{"PT", 0x1120},
	{"PS", 0x1121},
	{"PSK", 0x1122},
	{"PST", 0x1123},
	{"PSP", 0x1124},
	{"PSS", 0x1125},
	{"PSJ", 0x1126},
	{"PJ", 0x1127},
	{"PC", 0x1128},
	{"PTH", 0x1129},
	{"PPH", 0x112a},
	{"F", 0x112b},
	{"FF", 0x112c},
	{"SK", 0x112d},
	{"SN", 0x112e},
	{"ST", 0x112f},
	{"SL", 0x1130},
	{"SM", 0x1131},
	{"SP", 0x1132},
	{"SPK", 0x1133},
	{"SSS", 0x1134},
	{"SNG", 0x1135},
	{"SJ", 0x1136},
	{"SC", 0x1137},
	{"SKH", 0x1138},
	{"STH", 0x1139},
	{"SPH", 0x113a},
	{"SH", 0x113b},
	{"SX", 0x113c},
	{"ZX", 0x113d},
	{"SG", 0x113e},
	{"ZG", 0x113f},
	{"Z", 0x1140},
	{"NGK", 0x1141},
	{"NGT", 0x1142},
	{"NGM", 0x1143},
	{"NGP", 0x1144},
	{"NGS", 0x1145},
	{"NGZ", 0x1146},
	{"NNG", 0x1147},
	{"NGJ", 0x1148},
	{"NGC", 0x1149},
	{"NGTH", 0x114a},
	{"NGPH", 0x114b},
	{"NG", 0x114c},
	{"JNG", 0x114d},
	{"TSX", 0x114e},
	{"DZX", 0x114f},
	{"TSG", 0x1150},
	{"DZG", 0x1151},
	{"CKH", 0x1152},
	{"CH", 0x1153},
	{"TXH", 0x1154},
	{"TGH", 0x1155},
	{"PHP", 0x1156},
	{"FH", 0x1157},
	{"HH", 0x1158},
	{"Q", 0x1159},
	{"KT", 0x115a},
	{"NS", 0x115b},
	{"NJ", 0x115c},
	{"NH", 0x115d},
	{"TL", 0x115e},

	{"TM", 0xa960},
	{"TP", 0xa961},
	{"TS", 0xa962},
	{"TJ", 0xa963},
	{"LK", 0xa964},
	{"LG", 0xa965},
	{"LT", 0xa966},
	{"LD", 0xa967},
	{"LM", 0xa968},
	{"LP", 0xa969},
	{"LB", 0xa96a},
	{"LF", 0xa96b},
	{"LS", 0xa96c},
	{"LJ", 0xa96d},
	{"LKH", 0xa96e},
	{"MK", 0xa96f},
	{"MT", 0xa970},
	{"MS", 0xa971},
	{"PSTH", 0xa972},
	{"PKH", 0xa973},
	{"BH", 0xa974},
	{"SSP", 0xa975},
	{"NGL", 0xa976},
	{"NGH", 0xa977},
	{"DGH", 0xa978},
	{"TTH", 0xa979},
	{"PHH", 0xa97a},
	{"HS", 0xa97b},
	{"QQ", 0xa97c},
});
constexpr static ConstDict<std::string_view, int>::Dict dict_median_archaic({
	{"A", 0x1161},
	{"AI", 0x1162},
	{"YA", 0x1163},
	{"YAI", 0x1164},
	{"E", 0x1165},
	{"EI", 0x1166},
	{"YE", 0x1167},
	{"YEI", 0x1168},
	{"O", 0x1169},
	{"OA", 0x116a},
	{"OAI", 0x116b},
	{"OI", 0x116c},
	{"YO", 0x116d},
	{"U", 0x116e},
	{"UE", 0x116f},
	{"UEI", 0x1170},
	{"UI", 0x1171},
	{"YU", 0x1172},
	{"W", 0x1173},
	{"WI", 0x1174},
	{"I", 0x1175},
	{"AO", 0x1176},
	{"AU", 0x1177},
	{"YAO", 0x1178},
	{"YAYO", 0x1179},
	{"EO", 0x117a},
	{"EU", 0x117b},
	{"EW", 0x117c},
	{"YEO", 0x117d},
	{"YEU", 0x117e},
	{"OE", 0x117f},
	{"OEI", 0x1180},
	{"OYEI", 0x1181},
	{"OO", 0x1182},
	{"OU", 0x1183},
	{"YOYA", 0x1184},
	{"YOYAI", 0x1185},
	{"YOYE", 0x1186},
	{"YOO", 0x1187},
	{"YOI", 0x1188},
	{"UA", 0x1189},
	{"UAI", 0x118a},
	{"UEW", 0x118b},
	{"UYEI", 0x118c},
	{"UU", 0x118d},
	{"YUA", 0x118e},
	{"YUE", 0x118f},
	{"YUEI", 0x1190},
	{"YUYE", 0x1191},
	{"YUYEI", 0x1192},
	{"YUU", 0x1193},
	{"YUI", 0x1194},
	{"WU", 0x1195},
	{"WW", 0x1196},
	{"WIU", 0x1197},
	{"IA", 0x1198},
	{"IYA", 0x1199},
	{"IO", 0x119a},
	{"IU", 0x119b},
	{"IW", 0x119c},
	{"IV", 0x119d},
	{"V", 0x119e},
	{"VE", 0x119f},
	{"VU", 0x11a0},
	{"VI", 0x11a1},
	{"VV", 0x11a2},
	{"AW", 0x11a3},
	{"YAU", 0x11a4},
	{"YEYA", 0x11a5},
	{"OYA", 0x11a6},
	{"OYAI", 0x11a7},

	{"OYE", 0xd7b0},
	{"OOI", 0xd7b1},
	{"YOA", 0xd7b2},
	{"YOAE", 0xd7b3},
	{"YOE", 0xd7b4},
	{"UYE", 0xd7b5},
	{"UII", 0xd7b6},
	{"YUAI", 0xd7b7},
	{"YUO", 0xd7b8},
	{"WA", 0xd7b9},
	{"WE", 0xd7ba},
	{"WEI", 0xd7bb},
	{"WO", 0xd7bc},
	{"IYAO", 0xd7bd},
	{"IYAI", 0xd7be},
	{"IYE", 0xd7bf},
	{"IYEI", 0xd7c0},
	{"IOI", 0xd7c1},
	{"IYO", 0xd7c2},
	{"IYU", 0xd7c3},
	{"II", 0xd7c4},
	{"VA", 0xd7c5},
	{"VEI", 0xd7c6},
});
constexpr static ConstDict<std::string_view, int>::Dict dict_coda_archaic({
	{"", 0 },
	{"K", 0x11a8},
	{"G", 0x11a9},
	{"KS", 0x11aa},
	{"N", 0x11ab},
	{"NJ", 0x11ac},
	{"NH", 0x11ad},
	{"T", 0x11ae},
	{"L", 0x11af},
	{"LK", 0x11b0},
	{"LM", 0x11b1},
	{"LP", 0x11b2},
	{"LS", 0x11b3},
	{"LTH", 0x11b4},
	{"LPH", 0x11b5},
	{"LH", 0x11b6},
	{"M", 0x11b7},
	{"P", 0x11b8},
	{"PS", 0x11b9},
	{"S", 0x11ba},
	{"SS", 0x11bb},
	{"QNG", 0x11bc},
	{"J", 0x11bd},
	{"C", 0x11be},
	{"KH", 0x11bf},
	{"TH", 0x11c0},
	{"PH", 0x11c1},
	{"H", 0x11c2},
	{"KL", 0x11c3},
	{"KSK", 0x11c4},
	{"NK", 0x11c5},
	{"NT", 0x11c6},
	{"NS", 0x11c7},
	{"NZ", 0x11c8},
	{"NTH", 0x11c9},
	{"TK", 0x11ca},
	{"TL", 0x11cb},
	{"LKS", 0x11cc},
	{"LN", 0x11cd},
	{"LT", 0x11ce},
	{"LDH", 0x11cf},
	{"LL", 0x11d0},
	{"LMK", 0x11d1},
	{"LMS", 0x11d2},
	{"LPS", 0x11d3},
	{"LBH", 0x11d4},
	{"LF", 0x11d5},
	{"LSS", 0x11d6},
	{"LZ", 0x11d7},
	{"LKH", 0x11d8},
	{"LQ", 0x11d9},
	{"MK", 0x11da},
	{"ML", 0x11db},
	{"MP", 0x11dc},
	{"MS", 0x11dd},
	{"MSS", 0x11de},
	{"MZ", 0x11df},
	{"MC", 0x11e0},
	{"MH", 0x11e1},
	{"MF", 0x11e2},
	{"PL", 0x11e3},
	{"PPH", 0x11e4},
	{"BH", 0x11e5},
	{"F", 0x11e6},
	{"SK", 0x11e7},
	{"ST", 0x11e8},
	{"SL", 0x11e9},
	{"SP", 0x11ea},
	{"Z", 0x11eb},
	{"NGK", 0x11ec},
	{"NGG", 0x11ed},
	{"NNG", 0x11ee},
	{"NGKH", 0x11ef},
	{"NG", 0x11f0},
	{"NGS", 0x11f1},
	{"NGZ", 0x11f2},
	{"PHP", 0x11f3},
	{"FH", 0x11f4},
	{"HN", 0x11f5},
	{"HL", 0x11f6},
	{"HM", 0x11f7},
	{"HP", 0x11f8},
	{"Q", 0x11f9},
	{"KN", 0x11fa},
	{"KP", 0x11fb},
	{"KC", 0x11fc},
	{"KKH", 0x11fd},
	{"GH", 0x11fe},
	{"NN", 0x11ff},

	{"NL", 0xd7cb},
	{"NC", 0xd7cc},
	{"D", 0xd7cd},
	{"DP", 0xd7ce},
	{"TP", 0xd7cf},
	{"TS", 0xd7d0},
	{"TSK", 0xd7d1},
	{"TJ", 0xd7d2},
	{"TC", 0xd7d3},
	{"TTH", 0xd7d4},
	{"LG", 0xd7d5},
	{"LGH", 0xd7d6},
	{"LLKH", 0xd7d7},
	{"LMH", 0xd7d8},
	{"LPT", 0xd7d9},
	{"LPPH", 0xd7da},
	{"LNG", 0xd7db},
	{"LQH", 0xd7dc},
	{"R", 0xd7dd},
	{"MN", 0xd7de},
	{"MNN", 0xd7df},
	{"MM", 0xd7e0},
	{"MPS", 0xd7e1},
	{"MJ", 0xd7e2},
	{"PT", 0xd7e3},
	{"PLPH", 0xd7e4},
	{"PM", 0xd7e5},
	{"B", 0xd7e6},
	{"PST", 0xd7e7},
	{"PJ", 0xd7e8},
	{"PC", 0xd7e9},
	{"SM", 0xd7ea},
	{"SF", 0xd7eb},
	{"SSK", 0xd7ec},
	{"SST", 0xd7ed},
	{"SZ", 0xd7ee},
	{"SJ", 0xd7ef},
	{"SC", 0xd7f0},
	{"STH", 0xd7f1},
	{"SH", 0xd7f2},
	{"ZP", 0xd7f3},
	{"ZF", 0xd7f4},
	{"NGM", 0xd7f5},
	{"NGH", 0xd7f6},
	{"JP", 0xd7f7},
	{"JB", 0xd7f8},
	{"DG", 0xd7f9},
	{"PHS", 0xd7fa},
	{"PHTH", 0xd7fb},
});

template<typename Match> constexpr bool syllable_archaic(Match const&m, std::string&out) {
	uint32_t result[4];

	if (auto const v = dict_initial_archaic[m.template get<1>().to_view()]; v != nullptr)
		result[0] = *v;
	else return false;

	if (auto const v = dict_median_archaic[m.template get<2>().to_view()]; v != nullptr)
		result[1] = *v;
	else return false;

	if (auto const v = dict_coda_archaic[m.template get<3>().to_view()]; v != nullptr)
		result[2] = *v;
	else return false;

	result[3] = m.template get<4>().to_view() == "1" ? 0x302e :
		m.template get<4>().to_view() == "2" ? 0x302f : 0;

	size_t len = out.length();
	out.resize(len + 16);
	int n = 0;
	for (uint32_t c : result)
		if (c != 0) n += u32u8(c, out.data() + len + n);
	out.resize(len + n);

	return true;
}

constexpr static RgxdMaker<char, "(" PAT_INITIAL ")([yw]?(?:" PAT_MEDIAN "))(l)(?=[yw]?(?:" PAT_MEDIAN "))">::RegexoidFunc item_reul_coda(syllable);
constexpr static RgxdMaker<char, "(" PAT_INITIAL ")([yw]?(?:" PAT_MEDIAN "))()(?=(?:" PAT_INITIAL_2 "|" PAT_INITIAL_1 ")[yw]?(?:" PAT_MEDIAN "))">::RegexoidFunc item_no_coda(syllable);
constexpr static RgxdMaker<char, "(" PAT_INITIAL ")([yw]?(?:" PAT_MEDIAN "))(" PAT_CODA_1 ")(?=(?:" PAT_INITIAL_2 "|" PAT_INITIAL_1 ")[yw]?(?:" PAT_MEDIAN "))">::RegexoidFunc item_next_ssang(syllable);
constexpr static RgxdMaker<char, "(" PAT_INITIAL ")([yw]?(?:" PAT_MEDIAN "))(" PAT_CODA ")'?">::RegexoidFunc item_syl(syllable);
constexpr static RgxdMaker<char, "([B-DF-HJ-NP-TXZ]*)([AEIOUVWY]+)([B-DF-HJ-NP-TXZ]*)([012]?)'?">::RegexoidFunc item_archaic(syllable_archaic);
constexpr static RgxdMaker<char, "...">::RegexoidMap item_3({
	{ "lps", "\u316B" },
	{ "psk", "\u3174" },
	{ "pst", "\u3175" },
	{ "pch", "\u3176" },
	{ "pth", "\u3177" },
	{ "sch", "\u317E" },
	{ "ngq", "\u3181" },
	{ "ngs", "\u3182" },
	{ "ngz", "\u3183" },
});
constexpr static RgxdMaker<char, "..">::RegexoidMap item_2({
	{ "kk", "\u3132" },
	{ "tt", "\u3138" },
	{ "pp", "\u3143" },
	{ "ss", "\u3146" },
	{ "ng", "\u3147" },
	{ "jj", "\u3149" },
	{ "ch", "\u314A" },

	{ "ks", "\u3133" },
	{ "nj", "\u3135" },
	{ "nh", "\u3136" },
	{ "lk", "\u313A" }, { "lg", "\u313A" },
	{ "lm", "\u313B" },
	{ "lb", "\u313C" },
	{ "ls", "\u313D" },
	{ "lt", "\u313E" },
	{ "lp", "\u313F" },
	{ "lh", "\u3140" },
	{ "ps", "\u3144" },

	{ "nn", "\u3165" },
	{ "nt", "\u3166" },
	{ "ns", "\u3167" },
	{ "nz", "\u3168" },
	{ "lx", "\u3169" },
	{ "ld", "\u316A" },
	{ "lz", "\u316C" },
	{ "lq", "\u316D" },
	{ "mp", "\u316E" },
	{ "ms", "\u316F" },
	{ "mz", "\u3170" },
	{ "pk", "\u3172" },
	{ "pt", "\u3173" },
	{ "sk", "\u317A" },
	{ "sn", "\u317B" },
	{ "st", "\u317C" },
	{ "sp", "\u317D" },
	{ "fh", "\u3184" },
	{ "hh", "\u3185" },
});
constexpr static RgxdMaker<char, ".">::RegexoidMap item_1({
	{ "g", "\u3131" },
	{ "n", "\u3134" },
	{ "d", "\u3137" },
	{ "r", "\u3139" }, { "l", "\u3139" },
	{ "m", "\u3141" },
	{ "b", "\u3142" },
	{ "s", "\u3145" },
	{ "j", "\u3148" },
	{ "c", "\u314A" },
	{ "k", "\u314B" },
	{ "t", "\u314C" },
	{ "p", "\u314D" },
	{ "h", "\u314E" },

	{ "w", "\u3171" },
	{ "f", "\u3178" },
	{ "v", "\u3179" },
	{ "z", "\u317F" },
	{ "y", "\u3180" },
	{ "q", "\u3186" },
});

constexpr static Regexoid<char>const*items[] = {
	&item_reul_coda,
	&item_no_coda,
	&item_next_ssang,
	&item_syl,
	&item_archaic,
	&item_3,
	&item_2,
	&item_1,
};

namespace lovestringh {
	Transliterator make_hangul() {
		return Transliterator("Hangul (Alt+K)", items);
	}
}